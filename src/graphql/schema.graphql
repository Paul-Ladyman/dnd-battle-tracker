schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Condition @aws_api_key @aws_iam {
  text: String!
  appliedAtRound: Int!
  appliedAtSeconds: Int!
  url: String!
  id: String!
}

type Note @aws_api_key @aws_iam {
  text: String!
  appliedAtRound: Int!
  appliedAtSeconds: Int!
  url: String
  id: String
}

type Creature @aws_api_key @aws_iam {
  name: String!
  initiative: Int
  healthPoints: Int
  maxHealthPoints: Int
  temporaryHealthPoints: Int
  id: Int!
  alive: Boolean!
  conditions: [Condition!]
  notes: [Note!]
  locked: Boolean!
  shared: Boolean!
  hitPointsShared: Boolean
}

type Battle @aws_api_key @aws_iam {
  battleId: String!
  creatureCount: Int
  round: Int!
  creatures: [Creature!]
  activeCreature: Int
}

input ConditionInput @aws_api_key @aws_iam {
  text: String!
  appliedAtRound: Int!
  appliedAtSeconds: Int!
  url: String!
  id: String!
}

input NoteInput @aws_api_key @aws_iam {
  text: String!
  appliedAtRound: Int!
  appliedAtSeconds: Int!
  url: String
  id: String
}

input CreatureInput @aws_api_key @aws_iam {
  name: String!
  initiative: Int
  healthPoints: Int
  maxHealthPoints: Int
  temporaryHealthPoints: Int
  id: Int!
  alive: Boolean!
  conditions: [ConditionInput!]
  notes: [NoteInput!]
  locked: Boolean!
  shared: Boolean!
  hitPointsShared: Boolean
}

input BattleInput @aws_api_key @aws_iam {
  battleId: String!
  creatureCount: Int
  round: Int!
  creatures: [CreatureInput!]
  activeCreature: Int
  expdate: Int!
}

type Mutation @aws_api_key @aws_iam {
  createDndbattletracker(input: BattleInput!): Battle
  updateDndbattletracker(input: BattleInput!): Battle
}

type Query @aws_api_key @aws_iam {
  getDndbattletracker(battleId: String!): Battle
}

type Subscription @aws_api_key @aws_iam {
  onCreateDndbattletracker(battleId: String): Battle @aws_subscribe(mutations : ["createDndbattletracker"])
  onUpdateDndbattletracker(battleId: String): Battle @aws_subscribe(mutations : ["updateDndbattletracker"])
}
